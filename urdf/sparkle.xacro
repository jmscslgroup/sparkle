<?xml version="1.0"?>
<robot name="$(arg roboname)" xmlns:xacro="http://www.ros.org/wiki/xacro">
 <xacro:property name="car_length" value="61.728100"/>
 <xacro:property name="car_width" value="157.523697"/>
 <xacro:property name="car_height" value="44.270203"/>
 <xacro:property name="scale_factor" value="0.0254"/>
 <xacro:property name="meshlab_factor" value="0.1"/>
 <xacro:property name="car_mass" value="10"/>
<xacro:property name="car_volume" value="433402.531250"/>


<xacro:property name="base_mass_ixx" value="1773.47881606"/>
    <xacro:property name="base_mass_ixy" value="0.00623522726"/>
    <xacro:property name="base_mass_ixz" value="0.1256406519"/>
    <xacro:property name="base_mass_iyx" value="0.00623522726"/>
    <xacro:property name="base_mass_iyy" value="571.89989935"/>  
    <xacro:property name="base_mass_iyz" value="-115.176835391"/>
    <xacro:property name="base_mass_izx" value="0.1256406519"/>
    <xacro:property name="base_mass_izy" value="-115.176835391"/>
    <xacro:property name="base_mass_izz" value="1974.56552349"/>

<xacro:include filename="$(find sparkle)/urdf/sparkle.gazebo"/>

<link name="base_link">
      <collision name="collision">
        <origin xyz="0 0 0" rpy="0 0 1.57079632679"/>
        <geometry>
          <!--box size="${car_length*scale_factor} ${car_width*scale_factor} ${car_height*scale_factor}"/-->
          <mesh scale="0.0254 0.0254 0.0254" filename="package://sparkle/meshes/hatchback.obj"/>
        </geometry>
      </collision>
      <visual name="visual">
        <origin xyz="0 0 0" rpy="0 0 1.57079632679"/>
        <geometry>
          <mesh scale="0.0254 0.0254 0.0254" filename="package://sparkle/meshes/hatchback.obj"/>
        </geometry>
      </visual>
      <inertial>
                <mass value="${car_mass}" />
                <origin xyz="0 0 0" rpy="0 0 1.57079632679"/>
                   <inertia
                ixx="${base_mass_ixx}"  ixy="${base_mass_ixy}" ixz="${base_mass_ixz}"
                iyx="${base_mass_iyx}" iyy="${base_mass_iyy}" iyz="${base_mass_iyz}"
                izx="${base_mass_izx}" izy="${base_mass_izy}" izz="${base_mass_izz}"/>

                <!--inertia ixx="${(1/6)*car_mass*( (car_width*scale_factor)*(car_width*scale_factor)  +   (car_height*scale_factor)*(car_height*scale_factor) )  }" ixy="0" ixz="0"
                iyy="${(1/6)*car_mass*( (car_length*scale_factor)*(car_length*scale_factor)  +   (car_height*scale_factor)*(car_height*scale_factor) )  }" iyz="0"
                izz="${(1/6)*car_mass*( (car_length*scale_factor)*(car_length*scale_factor)  +   (car_width*scale_factor)*(car_width*scale_factor) )  }" />
                
                  <inertia ixx="${(1/6)*car_mass*( (car_width*scale_factor)*(car_width*scale_factor)  +   (car_height*scale_factor)*(car_height*scale_factor) )  }" ixy="0" ixz="0"
                iyy="${(1/6)*car_mass*( (car_length*scale_factor)*(car_length*scale_factor)  +   (car_height*scale_factor)*(car_height*scale_factor) )  }" iyz="0"
                izz="${(1/6)*car_mass*( (car_length*scale_factor)*(car_length*scale_factor)  +   (car_width*scale_factor)*(car_width*scale_factor) )  }" /-->
                
    </inertial>

</link>
</robot>
